/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import constants.Constants;
import db.SettingsLoader;
import db.dao.impl.KorisnikDaoImpl;
import domen.Korisnik;
import java.awt.Color;
import java.io.IOException;
import java.net.ServerSocket;
import java.sql.DriverManager;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import server.Server;
import table.model.KorisnikStatusTableModel;
import thread.NitKlijent;
import thread.NitProveraStatusa;
import thread.NitServer;

/**
 *
 * @author Petar
 */
public class FServer extends javax.swing.JFrame {

    NitServer nitServer;
    int port;

    String msgStop = "Server nije pokrenut";
    String msgStart = "Server je pokrenut";

    /**
     * Creates new form FServer
     */
    public FServer() {
        initComponents();
        centrirajFormu();
        initForm();
        postaviTableModel();

        try {
            port = Integer.valueOf(SettingsLoader.getInstance().getValue(Constants.APPLICATION_PORT));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Nije moguce ucitati broj porta! Program se prekida!");
            dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnServerStart = new javax.swing.JButton();
        jBtnServerStop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblKorisniciStatus = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuKonfiguracija = new javax.swing.JMenu();
        jMenuItemKonekcijaSaBazom = new javax.swing.JMenuItem();
        jMenuItemServer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBtnServerStart.setText("Server start");
        jBtnServerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnServerStartActionPerformed(evt);
            }
        });

        jBtnServerStop.setText("Server stop");
        jBtnServerStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnServerStopActionPerformed(evt);
            }
        });

        jLabel1.setText("Status:");

        jTblKorisniciStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTblKorisniciStatus);

        jMenuKonfiguracija.setText("Konfiguracija");

        jMenuItemKonekcijaSaBazom.setText("Konekcija sa bazom");
        jMenuItemKonekcijaSaBazom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemKonekcijaSaBazomActionPerformed(evt);
            }
        });
        jMenuKonfiguracija.add(jMenuItemKonekcijaSaBazom);

        jMenuItemServer.setText("Server");
        jMenuItemServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemServerActionPerformed(evt);
            }
        });
        jMenuKonfiguracija.add(jMenuItemServer);

        jMenuBar1.add(jMenuKonfiguracija);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnServerStart)
                        .addGap(27, 27, 27)
                        .addComponent(jBtnServerStop)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnServerStart)
                    .addComponent(jBtnServerStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnServerStartActionPerformed
        try {
            try {
                DriverManager.getConnection(SettingsLoader.getInstance().getValue(Constants.URL),
                        SettingsLoader.getInstance().getValue(Constants.USER),
                        SettingsLoader.getInstance().getValue(Constants.PASSWORD));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Nije moguce konektovati se na bazu podataka! Server nece biti startovan", "Greska", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (nitServer == null || !nitServer.isAlive()) {
                nitServer = new NitServer(port);
                nitServer.start();
            } else {
                nitServer.interrupted();
            }
            jBtnServerStart.setEnabled(false);
            jBtnServerStop.setEnabled(true);
            jMenuKonfiguracija.setEnabled(false);
            jLabelStatus.setText(msgStart);
            jLabelStatus.setForeground(Color.GREEN);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Dogodila se greska kod pokretanja servera! Greska: " + e.getMessage());
        }
    }//GEN-LAST:event_jBtnServerStartActionPerformed

    private void jMenuItemServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemServerActionPerformed
        JDialog fKonfiguracijaServera = new FKonfiguracijaServera(this, true);
        fKonfiguracijaServera.setVisible(true);
    }//GEN-LAST:event_jMenuItemServerActionPerformed

    private void jBtnServerStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnServerStopActionPerformed
        try {

            for (NitKlijent klijent : nitServer.getKlijenti()) {
                klijent.getSocket().close();
                klijent.interrupt();
            }

            if (nitServer != null || !nitServer.isInterrupted()) {
                nitServer.getServerSocket().close();
                nitServer.interrupt();
                System.out.println(nitServer.isInterrupted() + "");
            }
            jBtnServerStop.setEnabled(false);
            jBtnServerStart.setEnabled(true);
            jMenuKonfiguracija.setEnabled(true);

            jLabelStatus.setText(msgStop);
            jLabelStatus.setForeground(Color.RED);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Dogodila se greska prilikom zaustavljanja servera.");
        }
    }//GEN-LAST:event_jBtnServerStopActionPerformed

    private void jMenuItemKonekcijaSaBazomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemKonekcijaSaBazomActionPerformed
        JDialog fKonfiguracijaBaze = new FKonfiguracijaBaze(this, true);
        fKonfiguracijaBaze.setVisible(true);
    }//GEN-LAST:event_jMenuItemKonekcijaSaBazomActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnServerStart;
    private javax.swing.JButton jBtnServerStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemKonekcijaSaBazom;
    private javax.swing.JMenuItem jMenuItemServer;
    private javax.swing.JMenu jMenuKonfiguracija;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTblKorisniciStatus;
    // End of variables declaration//GEN-END:variables

    private void centrirajFormu() {
        setLocationRelativeTo(null);
    }

    private void initForm() {
        jBtnServerStop.setEnabled(false);
        jLabelStatus.setText(msgStop);
        jLabelStatus.setForeground(Color.RED);
    }

    private void postaviTableModel() {
        try {
            List<Korisnik> korisnici = KorisnikDaoImpl.getInstance().vratiSveKorisnike();
            for (Korisnik korisnik : korisnici) {
                korisnik.setStatus("nije aktivan");
            }
            KorisnikStatusTableModel kstm = new KorisnikStatusTableModel(korisnici);
            jTblKorisniciStatus.setModel(kstm);

            NitProveraStatusa nps = new NitProveraStatusa(kstm);
            nps.start();

        } catch (Exception e) {

        }
    }

}
